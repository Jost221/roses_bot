import asyncio
import logging
import sys
import env

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineQuery, CallbackQuery
from aiogram.utils.markdown import hbold
from aiogram import F

from bs_orm import Requests
import global_info.global_data as global_data
from processing import models
from processing import data_processing, db_processing
from global_info.keyboards import *


TOKEN = env.__token__

dp = Dispatcher()


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    if not db_processing.create_user(message.from_user.id):
        await message.answer(f"–í—ã —É–∂–µ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É")
    else:
        await message.answer(
            f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {hbold(message.from_user.full_name)}!\n –î–∞–ª–µ–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ—Ä–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await any_one_message(message, True)


@dp.message()
async def any_one_message(message: Message, from_start=False):
    status = db_processing.get_user_status(message.from_user.id)
    if status < 5:
        if not from_start:
            result, status_result = data_processing.check_answer(message.text,
                                                                 status,
                                                                 global_data.new_user_data['column_name'][status] if status < 3 else global_data.bank_data['column_name'][status-3])
            if not status_result:
                await message.answer(f'–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞: {result}. –ü–æ–ø—Ä–æ–±–µ–º –µ—à—ë —Ä–∞–∑?')
            else:
                if status < 2 or str(result) == '0':
                    db_processing.save_user_data(message.from_user.id,
                                                 global_data.new_user_data['column_name'][status], result)
                elif status == 2 and result == 1:
                    db_processing.save_user_data(message.from_user.id,
                                                 global_data.new_user_data['column_name'][status],
                                                 result, 3)
                    await message.answer(
                        f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ')
                    await any_one_message(message, True)
                    return
                elif status > 2:
                    db_processing.create_bank(message.from_user.id)
                    db_processing.save_bank_data(message.from_user.id,
                                                 global_data.bank_data['column_name'][status-3], result)
                status = db_processing.get_user_status(message.from_user.id)
        if status < 3:
            await message.answer(
                f'–í–≤–µ–¥–∏—Ç–µ {global_data.new_user_data["user_view"][status]}')
        elif status < 5:
            await message.answer(
                f'–í–≤–µ–¥–∏—Ç–µ {global_data.bank_data["user_view"][status-3]}')
        else:
            await any_one_message(message)

    else:
        if message.text == "‚úÖ–ù–∞ —á—Ç–æ —è —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è?)‚úÖ":
            if db_processing.get_magazine_station():
                if magazin := db_processing.get_magazin(message.from_user.id) \
                        == None:
                    magazin = "–ù–µ —É–∫–∞–∑–∞–Ω"
                if count_roses := db_processing.get_count_roses(message.from_user.id) \
                        == None:
                    count_roses = '–ù–µ —É–∫–∞–∑–∞–Ω'
                await message.answer(
                    f'–í—ã –æ–±—è–∑–∞–Ω—ã:\n\t\t–ü–æ–¥–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {magazin}\n\t\t–ü—Ä–∏—Ö–≤–∞—Ç–∏–≤ —Å —Å–æ–±–æ–π —Ä–æ–∑—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {count_roses} —à—Ç.')
            else:
                await message.answer(f'–ü–æ–∫–∞ —á—Ç–æ –≤—ã –Ω–µ –≤—ã–±–∏—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ :(')
        elif message.text == "üí∏–•–æ—á—É –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å":
            data = db_processing.get_bank_info()
            user_info = ''
            if len(data) == 0:
                await message.answer(
                    f"–ö —Å–æ–∂–∞–¥–µ–Ω–∏—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ª—é–¥–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–Ω—è—Ç—å—Å—è –∑–∞–∫—É–ø–∫–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ :(")
            for i in data:
                user_info += f'\n–ë–∞–Ω–∫: {i["name"]}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {i["data"]}\n'
            await message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: {user_info}\n–°–ü–ê–°–ò–ë–û –∑–∞ –≤–∞—à—É –ø–æ–º—â—å –≤ —ç—Ç–æ–π –Ω–µ–ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥—É–º–∫–µüôÉ")
        elif message.text == "–•–æ—á—É –ø–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –ø–æ–¥–∞—Ä–∏—Ç—å —Ä–æ–∑—ãüåπ":
            await message.answer(f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç–µ –¥–∞—Ä–∏—Ç—å —Ä–æ–∑—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ "@{bot._me.username} –≥–æ—Ä–æ–¥_—Ä–æ–∑"', reply_markup=main_keyboard())
        elif message.text == "üí≥–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞üí≥":
            db_processing.set_status(message.from_user.id, 3)
            await any_one_message(message, True)
        else:
            need_data = data_processing.search_item(
                message.text.replace(f'{bot._me.username} –≥–æ—Ä–æ–¥_—Ä–æ–∑', ''))
            if need_data != None:
                additionally = ''
                if db_processing.get_purchase_consent(message.from_user.id):
                    additionally += f"(–ú—ã –ø–µ—Ä–µ–≤–µ–¥—ë–º –≤–∞–º {need_data['count_roses']*300})"
                await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Å–º–æ—ç–µ—Ç–µ –ø—Ä–∏–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—Å—É:\n{need_data['addres']}\n–ó–∞—Ä–∞–Ω–µ–µ –∫—É–ø–∏–≤ {need_data['count_roses']}\n –ò –ë—ã—Ç—å —É –º–∞–≥–∞–∑–∏–Ω–∞ —Ä–æ–≤–Ω–æ –≤ 10:00 07.03.2024?"+additionally, reply_markup=magazin_keyboard())
            else:
                await message.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã :)", reply_markup=main_keyboard())


@dp.inline_query()
async def inline_echo(inline_query: InlineQuery) -> None:
    items = []
    if db_processing.get_user_status(inline_query.from_user.id) >= 5 and \
                '–≥–æ—Ä–æ–¥_—Ä–æ–∑' in inline_query.query and \
                inline_query.chat_type == 'sender':
        items = data_processing.get_list_item(
            [], inline_query.query.replace('–≥–æ—Ä–æ–¥_—Ä–æ–∑', '').strip())

    await bot.answer_inline_query(
        inline_query_id=inline_query.id,
        results=items,
        cache_time=1,
        is_personal=True
    )


@dp.callback_query(MyCallback.filter(F.bar != ''))
async def yes_btn(query: CallbackQuery, callback_data: MyCallback):
    db_processing.set_magazin_station(query.from_user.id, callback_data.bar)
    await query.message.answer("–•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç", \
                               reply_markup=main_keyboard())


async def main() -> None:

    Requests.db_settings.models = models
    # Requests.migrate()
    Requests.create_tables()

    global bot
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
